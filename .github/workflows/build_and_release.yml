name: Build and Release Luma Mods

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Development-Debug, Development-Release, Test-Release, Publishing-Release]
        platform: [x64, Win32]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Clone vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git

    - name: Bootstrap vcpkg
      run: .\vcpkg\bootstrap-vcpkg.bat

    # Exclusively for Prey (which is x64). Ideally it should find the vcpkg.json automatically
    - name: Install vcpkg packages
      run: |
        .\vcpkg\vcpkg install --triplet x64-windows --x-manifest-root=./Source/Games/Prey
        #.\vcpkg\vcpkg install --triplet x86-windows --x-manifest-root=./Source/Games/Prey
      continue-on-error: true

    - name: Integrate vcpkg with MSBuild
      run: .\vcpkg\vcpkg integrate install

    - name: Build Luma.sln ${{ matrix.config }}-${{ matrix.platform }}
      run: msbuild Luma.sln /p:Configuration=${{ matrix.config }} /p:Platform=${{ matrix.platform }}

    - name: Create ZIP per addon with matching shaders
      id: create_zip
      shell: pwsh
      # We only build publishing and test for now, development builds can be built locally by devs
      if: matrix.config == 'Publishing-Release' || matrix.config == 'Test-Release'
      run: |
      
        # Find the addon file in the build folder (adjust path accordingly)
        $addonDir = "Binaries\${{ matrix.platform }}-${{ matrix.config }}"
        $addonFiles = Get-ChildItem -Path $addonDir -Filter "Luma-*.addon"

        if ($addonFiles.Count -eq 0) {
          Write-Host "No addon files found."
          "skip_upload=true" >> $env:GITHUB_OUTPUT
          exit 0
        }

        "skip_upload=false" >> $env:GITHUB_OUTPUT
        
        foreach ($addonFile in $addonFiles) {
          if (-not $addonFile) {
            Write-Host "Addon file not found, it's likely this configuration isn't present for this project. Skipping."
            continue
          }

          # Extract project name by removing prefix 'Luma-' and suffix '.addon'
          $fileName = $addonFile.Name
          $projectName = $fileName -replace '^Luma-', '' -replace '\.addon$', ''
          $zipName = "Luma-$projectName.zip"
          Write-Host "Project name extracted: $projectName"
        
          # We don't care to publish the template project, it's just there for reference
          if ($projectName -like '*_Template*' -or $projectName -eq '*Template*') {
            Write-Host "Project is a template. Skipping ZIP creation and upload."
            continue
          }

          # Create a temp directory
          $tempDir = "temp_package"
          Remove-Item -Recurse -Force $tempDir -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "$tempDir/Luma" -Force | Out-Null

          # Copy shaders folder contents into Data subfolder
          Copy-Item -Path "Shaders/*" -Destination "$tempDir/Luma" -Recurse

          # Allowed subdirectories
          $allowedDirs = @("Global", "Includes", $projectName)

          # Full path to the copied Shaders folder
          $shaderRoot = Join-Path $tempDir "Luma"

          # Get all files under the copied Shaders folder
          Get-ChildItem -Path $shaderRoot -Recurse -File | ForEach-Object {
            $relativePath = $_.FullName.Substring($shaderRoot.Length + 1).TrimStart('\','/')
    
            # Extract top-level directory (first segment)
            $topDir = ($relativePath -split '[\\/]', 2)[0]

            # Check if it's a .hlsl file in an allowed directory
            if ($_.Extension -ne ".hlsl" -or ($allowedDirs -notcontains $topDir)) {
              Remove-Item $_.FullName -Force
            }
          }

          # Copy addon file to temp root
          Copy-Item -Path $addonFile.FullName -Destination $tempDir

          # Create zip with addon and renamed Shaders folder
          Compress-Archive -Path "$tempDir/*" -DestinationPath $zipName -Force

          # Optional: clean up
          Remove-Item -Recurse -Force $tempDir

          Write-Host "Mod packaged: $projectName"
          #"zipfile=$zipName" >> $env:GITHUB_OUTPUT
          #"skip_upload=false" >> $env:GITHUB_OUTPUT
        }

    - name: Upload ZIP
      if: (matrix.config == 'Publishing-Release' || matrix.config == 'Test-Release') && steps.create_zip.outputs.skip_upload != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Package-${{ matrix.config }}-${{ matrix.platform }}
        #path: ${{ steps.create_zip.outputs.zipfile }}
        path: |
          Luma-*.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Package-*
          merge-multiple: true  # puts all files in a single folder

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-${{ github.run_number }}
          name: Latest Release Build ${{ github.run_number }}
          #body: This is an automated release of binaries.
          files: |
            Luma-*.zip
