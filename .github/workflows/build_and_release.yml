name: Build and Release Luma Mods

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Development-Debug, Development-Release, Test-Release, Publishing-Release]
        platform: [x64, Win32]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Clone vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git

    - name: Bootstrap vcpkg
      run: .\vcpkg\bootstrap-vcpkg.bat

    # Exclusively for Prey (which is x64). Ideally it should find the vcpkg.json automatically
    - name: Install vcpkg packages
      run: |
        .\vcpkg\vcpkg install --triplet x64-windows --x-manifest-root=./Source/Games/Prey
#        .\vcpkg\vcpkg install --triplet x86-windows --x-manifest-root=./Source/Games/Prey
      continue-on-error: true

    - name: Integrate vcpkg with MSBuild
      run: .\vcpkg\vcpkg integrate install

    - name: Build Luma.sln ${{ matrix.config }}|${{ matrix.platform }}
      run: msbuild Luma.sln /p:Configuration=${{ matrix.config }} /p:Platform=${{ matrix.platform }}

    - name: Create ZIP per addon with matching shaders
      id: create_zip
      shell: pwsh
      # We only build publishing and test for now, development builds can be built locally by devs
      if: matrix.config == 'Publishing-Release' || matrix.config == 'Test-Release'
      run: |
        # Find the addon file in the build folder (adjust path accordingly)
        $addonFile = Get-ChildItem -Path "${{ matrix.platform }}-${{ matrix.config }}" -Filter "Luma-*.addon" | Select-Object -First 1

        if (-not $addonFile) {
          Write-Error "Addon file not found!"
          exit 1
        }

        # Extract project name by removing prefix 'Luma-' and suffix '.addon'
        $fileName = $addonFile.Name
        $projectName = $fileName -replace '^Luma-', '' -replace '\.addon$', ''

        Write-Host "Project name extracted: $projectName"
        
        # We don't care to publish the template project, it's just there for reference
        if ($projectName -like '*_Template*') {
          Write-Host "Project is a template. Skipping ZIP creation and upload."
          echo "skip_upload=true" >> $env:GITHUB_OUTPUT
          exit 0
        }

        # Paths
        $addonPath = $addonFile.FullName
        $globalShaderPath = "Luma-Framework\Shaders\Global\**\*.hlsl"
        $includeShaderPath = "Luma-Framework\Shaders\Includes\**\*.hlsl"
        $shaderPath = "Luma-Framework\Shaders\$projectName\**\*.hlsl"
        $zipName = "Luma-$projectName.zip"

        # Create ZIP with addon and matching shaders
        Compress-Archive -Path $addonPath, $globalShaderPath, $includeShaderPath, $shaderPath -DestinationPath $zipName -Force

        echo "zipfile=$zipName" >> $env:GITHUB_OUTPUT
        echo "skip_upload=false" >> $env:GITHUB_OUTPUT

    - name: Upload ZIP
      if: steps.create_zip.outputs.skip_upload != 'true' && (matrix.config == 'Publishing-Release' || matrix.config == 'Test-Release')
      uses: actions/upload-artifact@v4
      with:
        name: Package-${{ matrix.config }}-${{ matrix.platform }}
        path: ${{ steps.create_zip.outputs.zipfile }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Binaries-*
          merge-multiple: true  # puts all files in a single folder

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-${{ github.run_number }}
          name: Latest Release Build ${{ github.run_number }}
#          body: This is an automated release of binaries.
          files: |
            **/*.addon
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}